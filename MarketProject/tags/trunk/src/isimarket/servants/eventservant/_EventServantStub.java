package isimarket.servants.eventservant;


/**
* isimarket/model/servants/eventservant/_EventServantStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from services.idl
* mardi 20 mai 2008 17 h 50 CEST
*/

public class _EventServantStub extends org.omg.CORBA.portable.ObjectImpl implements isimarket.servants.eventservant.EventServant
{

  public void createEvent (String date, float price, String actionTypeCode)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createEvent", true);
                $out.write_string (date);
                $out.write_float (price);
                $out.write_string (actionTypeCode);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                createEvent (date, price, actionTypeCode        );
            } finally {
                _releaseReply ($in);
            }
  } // createEvent

  public void deleteEvent (int eventId)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("deleteEvent", true);
                $out.write_long (eventId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                deleteEvent (eventId        );
            } finally {
                _releaseReply ($in);
            }
  } // deleteEvent

  public isimarket.model.Event get (int eventId)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get", true);
                $out.write_long (eventId);
                $in = _invoke ($out);
                isimarket.model.Event $result = isimarket.model.EventHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get (eventId        );
            } finally {
                _releaseReply ($in);
            }
  } // get

  public isimarket.model.Event[] getEventsForActionType (String actionTypeCode)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getEventsForActionType", true);
                $out.write_string (actionTypeCode);
                $in = _invoke ($out);
                isimarket.model.Event $result[] = isimarket.model.EventListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getEventsForActionType (actionTypeCode        );
            } finally {
                _releaseReply ($in);
            }
  } // getEventsForActionType

  public void deleteEventsForActionType (String actionTypeCode)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("deleteEventsForActionType", true);
                $out.write_string (actionTypeCode);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                deleteEventsForActionType (actionTypeCode        );
            } finally {
                _releaseReply ($in);
            }
  } // deleteEventsForActionType

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:isimarket/model/servants/eventservant/EventServant:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _EventServantStub
