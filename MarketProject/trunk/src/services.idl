#include <model.idl>
module isimarket{
	module model{
		module servants{
			module administrationservant{
				interface AdministrationServant{
					void updateCash(in string login, in  float newCash);
					void createOperator(in string login, in string password,in float initalCash);
					void createWallet(in float initalCash);
					void deleteOperator(in string login);
				};
			};
			
			module walletservant{
				interface WalletServant{
				
					exception BadQuantityException {string reason;};
					exception NotEnoughCashException {string reason;};
					exception UnknownOperatorException {string reason;};
					exception WrongPasswordException {string reason;};
					exception NotEnoughAvailableActionsException {string reason;};		
							
					Wallet authentication(in string login, in string password) raises (UnknownOperatorException,WrongPasswordException);
					ActionList getActionListFromWallet(in long walletId); 
					Action getAction(in long actionId);
					Action buyAction(in long walletId,in string actionTypeCode,in long quantity) raises (BadQuantityException,NotEnoughCashException);
					void sellAction(in long walletId,in string actionTypeCode,in long actionId, in long quantity) raises (NotEnoughAvailableActionsException); 
				};
			};
			
			module alarmservant{
				interface AlarmServant{
					AlarmTypeList getAlarmTypeList();
					AlarmType getAlarmType(in long alarmTypeId);
					void createAlarmType(in string label);
					void deleteAlarmType(in long alarmTypeId);
					AlarmList getAlarmListFromWallet(in long walletId);
					Alarm getAlarm(in long alarmId);
					Alarm createAlarm(in string name,in long walletId, in long alarmTypeId,in string actionTypeCode);
					void deleteAlarm(in long alarmId);
				};
			};
			
			module actiontypeservant{
				interface ActionTypeServant{
					ActionTypeList getActionTypeList();
					ActionType getActionType(in string actionTypeCode);
					ActionType getLastInsertedActionType();
					void createActionType(in string code,in string label,in string introductionDate, in float introductionPrice, in long quantity, in
		    float currentPrice);
					void updateActionTypeQuantity(in string code, in long quantity);
		    		void updateActionTypeCurrentPrice(in string code, in float currentPrice);
		    		void deleteActionType(in string actionTypeCode);
					EventList getEventsForActionType(in string actionTypeCode);
				};
			};
			
			module eventservant{
				interface EventServant{
					void createEvent(in string date,in float price,in string actionTypeCode);
					void deleteEvent(in long eventId);
					Event get(in long eventId);
				};
			};
		};
	};
};